<!doctype html>
<style>
  body { background: rgb(225, 221, 196); }
  pre { margin: 0; border: 1px solid rgb(150,150,150) }
</style>

<pre id="myterm"></pre>
<input type="text" class="tib" placeholder="tib" size="80">

<script src="jquery-1.11.3.js"></script>
<script>
"use strict"
var mem = [] // memory map
////////////////////// packed string
function packstr( adr, tok ){
	if( tok.length > 0x1f ) // reserven 3 bits for flags ?
		console.log( "now only handln packed string length <= 0x1f, 4 [ bytes/cell ]" )
	var cell = tok.length
	for( var i = 1; i < parseInt( (tok.length + 4)/4 ) * 4; i ++ ){
		cell <<= 8
		cell |= i < tok.length + 1 ? tok.charCodeAt( i - 1 ) : 0 // backfill 0's
		if( i % 4 === 3 ){// next cell ?
			mem[ adr ++ ] = cell
			cell = 0
		}// if
	} return adr
}// packstr	
function str( adr ){
	var cell = mem[ adr ++ ], n = cell >> 24
	var s = ""; for( var i = 1; i < n + 1; i ++ ){
		s += String.fromCharCode( cell >> 8 * ( 3 - i % 4 ) & 0xff )
		if( i % 4 === 3 ){// next cell ?
			cell = mem[ adr ++ ]
		}// if
	} return s
}// str	

//////////////////////// word fields
// 1) ' ( tick) ( --- cfa )
// 2) PFA ( cfa -- pfa )
// 3) CFA ( Code Field Address) ( pfa --- cfa ) ?
// 4) LFA ( Link Field Address) ( nfa --- lfa ) ?
// 5) NFA ( Name Field Address) ( pfa --- nfa ) ?

// cell  | byt0|  1  |  2  |  3  | description
// ------+-----+-----+-----+-----+------------
// nfa 0 |  4  |  d  |  a  |  t  | count-byte 'n' & name
//     1 |  e  |  0  |  0  |  0  | "date"
// lfa 2 | previous nfa w/eol 0  | link
// cfa 3 |                       | execute token
// pfa 4 | data                  | parameter list
var xhere = 1 // end-of-list marker is 0
function defword( flg, tok, lfa, plist ){
	var nfa = xhere // name field address
	xhere = packstr( xhere, tok )
	mem[ nfa ] |= ( flg & 0xe0 ) << 24 // reserve flag bits
	mem[ xhere ++ ] = lfa // link field address
	for( var i = 0; i < plist.length; i ++ ){
		mem[ xhere ++ ] = plist[ i ]
	}// for
	return nfa
}// defword
function cfa( nfa ){
	var n = mem[ nfa ] >> 24 & 0x1f // count byte, reserve flag bits
	return nfa + parseInt( ( n + 4 ) / 4 ) + 1 // skipn link field
}// cfa

//////////////// special variables - more like cpu registers ?
var sp // stack pointer
var rp // return stack pointer

//////////////////////////// execute tokens ?
// The code address indicates code to be executed depending on word type:
// . VARIABLE words
// . CONSTANT words
// . colon-definition USER words
// . DOES> words
// . CODE-definition assembler words
function variable(){// value in next inline parm
	mem[ sp ++ ] = mem[ mem[ rp - 1 ] + 1 ] // ( --- pfa )
}
function primitive(){// jsfunction in next inline parm
	mem[ mem[ rp - 1 ] + 1 ]()
}
function colondef(){// call parm list
	debugger
	while( 1 ){
		mem[ ++ mem[ rp - 1 ] ]() // next inline parm
		if( fexit || fabort || fexpect ){
			if( fexit ) fexit = 0
			break
		}// if exit abort expect
	}// while 1
}// colondef

/////////////////////// variables ?
var xlatest = 0 // end-of-list marker, lfa = 0
xlatest = defword( 0, "sp0", xlatest, [ variable, 300 ]); var SP0 = cfa( xlatest )+1
xlatest = defword( 0, "rp0", xlatest, [ variable, 400 ]); var RP0 = cfa( xlatest )+1
xlatest = defword( 0, "tib0", xlatest, [ variable, 500 ]); var TIB0 = cfa( xlatest )+1
xlatest = defword( 0, "latest", xlatest, [ variable, 0 ]); var LATEST = cfa( xlatest )+1
xlatest = defword( 0, "here", xlatest, [ variable, 0 ]); var HERE = cfa( xlatest )+1
xlatest = defword( 0, "base", xlatest, [ variable, 10 ]); var BASE = cfa( xlatest )+1
//latest = defword( "state", latest, [ variable, 0 ]) // 0/1 - execution/compilation

//////////////////////////// jsfunction primitives ?
var my_jstib = [] // javascript array tib, text input buf
var fexit = 0, fabort = 0, fexpect = 0
xlatest = defword( 0, "word", xlatest, [ primitive, function(){
	var delim = mem[ -- sp ] // ( delim --- )
	var my_word = ""
	function word_handler(e){
		debugger
		if( e.charCode === delim ){// reached n or CR ?
			if( my_word.length ){// got word ?
				packstr( mem[ hereptr ], my_word )
				fexpect = 0
				if( rp > mem[ r0ptr ] ){// restart return stack ip ?
					colondef()
				} else {// back to monitor
					$('pre#myterm')[0].innerText += " ok "
					$('input.tib').off('.mytib')
						.on( 'keypress.mytib', monitor_handler )
				}// if return stack
			}// if word
		} else {// accumulate chars
			var c = String.fromCharCode( e.charCode )
			my_word += c
			$('pre#myterm')[0].innerText += c
		}// if delim
		return false // don't show key in input element, show in myterm
	}// word_handler
	
	if( my_jstib.length ){// tok in js array ?
		packstr( mem[ hereptr ], my_jstib.shift() )
		fexpect = 0
	} else {// wait for input
		fexpect = 1
		$('input.tib').off('.mytib')
			.on( 'keypress.mytib', word_handler )
	}// if
}]); var WORD = cfa( xlatest )
xlatest = defword( 0, "abort", xlatest, [ primitive , function(){
	sp = mem[ SP0 ] // reset stack
	fabort ++
}]); var ABORT = cfa( xlatest )
xlatest = defword( 0, "execute", xlatest, [ primitive, function(){
	mem[
		mem[ rp ++ ] = mem[ -- sp ] // ( cfa --- )
	]() // and away...
	rp -- // restart previous ip
}]); var EXECUTE = cfa( xlatest )
xlatest = defword( 0, "lit", xlatest, [	primitive, function(){
	mem[ sp ++ ] = mem[ ++ mem[ rp - 1 ] ] // ( --- lit ) parm inline
}]); var LIT = cfa( xlatest )
xlatest = defword( 0, "comma", xlatest, [ primitive, function(){
	mem[ mem[ HERE ] ++ ] = mem[ -- sp ] // ( n --- ) compile to 'here'
}]); var COMMA = cfa( xlatest )
xlatest = defword( 0, "compile", xlatest, [ primitive, function(){
	mem[ mem[ hereptr ] ++ ] = mem[ ++ mem[ rp - 1 ] ] // compile inline parm
}]); var COMPILE = cfa( xlatest )
xlatest = defword( 0, "zbranch", xlatest, [ primitive, function(){
	if( !mem[ -- sp ] ){ // ( flag --- )
		mem[ rp - 1 ] += mem[ ++ mem[ rp - 1 ] ] // branch offset inline
	} else {
		mem[ rp - 1 ] ++ // skipn inline parm
	}
}]); var ZBRANCH = cfa( xlatest )
xlatest = defword( 0, "branch", xlatest, [ primitive, function(){
	mem[ rp - 1 ] += mem[ ++ mem[ rp - 1 ] ] // branch offset inline
}]); var BRANCH = cfa( xlatest )
xlatest = defword( 0x40, ";", xlatest, [ primitive, function(){
	fexit ++
}]); var SEMICOLON = cfa( xlatest )
// function KEY(){// ( --- char )
// 	function key_handler(e){
// 		mem[ sp ++ ] = e.charCode
// 		fexpect = 0
// 		$('input.tib').off('.mytib').on( 'keypress.mytib', monitor_handler )
// 		$('pre#myterm')[0].innerText += " ok "
// 		return false // don't show key
// 	}// key_handler
// 	fexpect = 1
// 	$('input.tib').off('.mytib').on( 'keypress.mytib', key_handler )
// }// KEY
// function EXPECT(){// ( adr n --- )
// 	fexpect = mem[ -- sp ] // n limit
// 	var adr = mem[ -- sp ]
// 	function expect_handler(e){
// 		fexpect --
// 		if( fexpect === 0 || e.charCode === 13 ){// reached n or CR ?
// 			if( fexpect ){// got CR ?
// 				fexpect = 0
// 			} else {// n limit ?
// 				$('pre#myterm')[0].innerText += String.fromCharCode(
// 					mem[ adr ++ ] = e.charCode
// 				)
// 			} mem[ adr ] = 0 // terminaten
// 			if( rp > rp0 ){// restart ip (on return stack)
// 				colondef()
// 			} else {// back to monitor
// 				$('input.tib').off('.mytib').on( 'keypress.mytib', monitor_handler )
// 				$('pre#myterm')[0].innerText += " ok "
// 			}// if
// 		} else {// expectn keys
// 			$('pre#myterm')[0].innerText += String.fromCharCode(
// 				mem[ adr ++ ] = e.charCode
// 			)
// 		}// if
// 		return false // don't show key in input element, show in myterm
// 	}// expect_handler
// 	if( my_jstib.length ){// got tok ?
// 		var tok = my_jstib.shift()
// 		for( var i = 0; i < tok.length; i ++ ){
// 			mem[ adr ++ ] = tok.charAt( i )
// 		} mem[ adr ] = 0 // terminatr
// 		fexpect = 0
// 	} else {// wait for input
// 		$('input.tib').off('.mytib').on( 'keypress.mytib', expect_handler )
// 	}
// }// EXPECT
xlatest = defword( 0, "@", xlatest, [ primitive, function(){
	mem[ sp - 1 ] = mem[ mem[ sp - 1 ] ] // ( adr --- n )
}]); var FETCH = cfa( xlatest )
//function STORE(){ mem[ mem[ sp - 1 ] ] = mem[ sp - 2 ]; sp -= 2 }// ( n adr --- )
//function CR(){ $('pre#myterm')[0].innerText += '\n' }
xlatest = defword( 0, ".s", xlatest, [ primitive , function(){
	var n = sp - mem[ SP0 ]; if( n ){
		for( var i = 0; i < n; i ++ ){
			$('pre#myterm')[0].innerText +=
				mem[ sp - 1 - i ].toString( mem[ BASE ] ) + '\n'
		}// for
	} else {
		$('pre#myterm')[0].innerText += "empty"
	}// if
}]); var DOT_S = cfa( xlatest )

// : decade  10 0 do  i .  loop ;
// which executes like this: decade <ret> 0 1 2 3 4 5 6 7 8 9 ok

//function DUP(){	mem[ sp ++ ] = mem[ sp - 1 ] } // ( n --- n n )
xlatest = defword( 0, "pop", xlatest, [ primitive , function(){
	sp -- // ( n --- )
}]); var POP = cfa( xlatest )
xlatest = defword( 0, "and", xlatest, [ primitive , function(){
	mem[ sp - 2 ] &= mem[ sp - 1 ]; sp -- // ( n1 n2 --- n3 )
}]); var AND = cfa( xlatest )
xlatest = defword( 0, "pfa", xlatest, [ primitive , function(){
	mem[ sp - 1 ] = cfa( mem[ sp - 1 ] ) + 1 // ( nfa --- pfa )
}]); var PFA = cfa( xlatest )
xlatest = defword( 0, "cfa", xlatest, [ primitive , function(){
	mem[ sp - 1 ] -- // ( pfa --- cfa )
}]); var CFA = cfa( xlatest )
xlatest = defword( 0, "find", xlatest, [ primitive , function(){
	// ( adr1 adr2 --- pfa count-byte tf ) ok
	// ( adr1 adr2 --- ff ) ?
	var adr2 = mem[ -- sp ], adr1 = mem[ -- sp ]
	var n1 = mem[ adr1 ] >> 24 & 0x1f, s1 = str( adr1 )
	do {
		var n2 = mem[ adr2 ] >> 24 & 0x1f
		if( n2 === n1 ){ // count hit ?
			if( str( adr2 ) === s1 ){
				mem[ sp ++ ] = adr2 // ( --- nfa )
				mem[ PFA + 1 ]() // ( nfa --- pfa )
				mem[ sp ++ ] = n2 // ( --- count-byte )
				mem[ sp ++ ] = true // ( --- tf )
				return
			}// if str
		}// if n
	} while( adr2 = mem[ adr2 + parseInt( ( n2 + 4 ) / 4 ) ] ) // lnk
	mem[ sp ++ ] = false // ( --- ff )
}]); var FIND = cfa( xlatest )
xlatest = defword( 0, "number", xlatest, [ primitive , function(){
	var s = str( mem[ -- sp ] ) // ( addr --- n )
	var n  = parseInt( s, mem[ BASE ] )
	if( isNaN( n ) ){
		mem[ ABORT + 1 ]()
	} else {
		mem[ sp ++ ] = n
	}// if NaN
}]); var NUMBER = cfa( xlatest )
//latest = defword( "hex", latest, [ colondef, LIT, 16, TICK, "base", STORE, EXIT ])
//latest = defword( "decimal", latest, [ DECIMAL ])
//latest = defword( "@", latest, [ primitive, FETCH ])
//latest = defword( "!", latest, [ primitive, STORE ])
//latest = defword( "cr", latest, [ primitive, CR ])
//latest = defword( "expect", latest, [ primitive, EXPECT ])

function monitor_handler( e ){
	if( e.which === 13 ){ // return key
		$('pre#myterm')[0].innerText += this.value + '\n'
		my_jstib = this.value.split(/\s/).filter(Boolean)
		this.value = null

		while( my_jstib.length ){ // from javasript array ?
			packstr( mem[ TIB0 ], my_jstib.shift() )
			mem[ sp ++ ] = mem[ TIB0 ]
			fexpect = 0 // clearn ?
			if( rp > mem[ RP0 ] ){ // ip on return stack ?
				colondef()
			} else { // dictionary lookup
				mem[ sp ++ ] = mem[ LATEST ]
				mem[ FIND + 1 ]() // ( a1 a2 --- pfa n tf ) or ( a1 a2 --- ff )
				if( mem[ -- sp ] ){
					var n = mem[ -- sp ] // count byte
					mem[ CFA + 1 ]() // ( pfa --- cfa )
					mem[ EXECUTE + 1 ]() // ( cfa --- )
				} else {
					mem[ sp ++ ] = mem[ TIB0 ]
					mem[ NUMBER + 1 ]() // ( a1 --- d )
				}// if
			}// if rp
			if( fabort ){
				my_jstib.length = 0 // clear js input array ?
			}
		}// while jstib.length

		$('pre#myterm')[0].innerText += fabort ? (
			str( mem[ TIB0 ] ) + " ? "
		): " ok "
		fabort = 0
	}// if return
}// monitor_handler

//////////////////////////// colon definitions ?
xlatest = defword( 0, "'", xlatest, [
	colondef, LIT, ' ', WORD,
	HERE, FETCH, LATEST, FETCH, FIND,
	// ( adr1 adr2 --- pfa n tf ) or ( adr1 adr2 --- ff )
	ZBRANCH, 2,	POP, SEMICOLON, ABORT
]); var TICK = cfa( xlatest )
xlatest = defword( 0, "create", xlatest, [
	colondef, LIT, ' ', WORD,
	HERE, FETCH,
	SEMICOLON
]); var CREATE = cfa( xlatest )
xlatest = defword( 0, ":", xlatest, [
	colondef, COMPILE, CREATE,
	TIB0, HERE, 
//	TIB0, FETCH, FETCH, LIT, 0x1000000, DIVIDE,	// ( --- nbytes )
//	CMOVE, 
	TIB0, FETCH, LATEST, FETCH, FIND,
	// ( adr1 adr2 --- pfa n tf ) or ( adr1 adr2 --- ff )
	ZBRANCH, 12, // found ?
	LIT, 0x40, AND, ZBRANCH, 4, // immediate ?
	CFA, EXECUTE, BRANCH, -17, // execute (';' SEMICOLON is immediate)
	CFA, COMMA, BRANCH, -21, // compile
	COMPILE, LIT, TIB0, FETCH, NUMBER, COMMA, BRANCH, -29 // number
]); var COLON = cfa( xlatest )

//  ok 1 2 ' .s
//  ok execute
// 2
// 1
//  ok q
// q ? .s
// empty ok 

//                                 <--- todo: i'm here
// : X DUP 1+ . . ;
// 10 X
// 11 10
//  ok
$( document ).ready( function(){
	mem[ LATEST ] = xlatest
	mem[ HERE ] = xhere
	sp = mem[ SP0 ] = 300
	rp = mem[ RP0 ] = 400
	$( 'input.tib' ).off('.mytib')
		.on( 'keypress.mytib', monitor_handler ).focus()
	$('pre#myterm')[0].innerText += " ok "
}) // ready
</script>

